

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
        
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, CONST, LBRACE, RBRACE, SEMICOLON, COMMA, LSQUARE, RSQUARE, CLASS
terminal Integer NUMBER;
terminal String IDENT;
terminal IF, ELSE;

nonterminal Program, DeclList, MethodDeclList, Decl, ConstDecl, VarDecl, ClassDecl, ConstDeclList, ConstDeclOne, VarList, VarOne
nonterminal MethodsOpt

Program ::= (Program) PROG IDENT DeclList LBRACE MethodDeclList RBRACE;

DeclList ::= (DeclList) DeclList Decl
		|
		(NoDecl) /* epsilon */
		;

Decl ::= ConstDecl | VarDecl;


ConstDecl ::= CONST Type ConstDeclList SEMICOLON;

ConstDeclList ::= ConstDeclList COMMA ConstDeclOne
				|
				ConstDeclOne
				
ConstDeclOne ::= IDENT ASSIGNMENT NUMBER
			|
			IDENT ASSIGNMENT CHAR_CONST
			|
			IDENT ASSIGNMENT BOOL_CONST
			;
			
				
VarDecl::= (VarDecl) Type VarList SEMICOLON;

VarList::= VarList COMMA VarOne
		|
		VarOne

VarOne::= IDENT LSQUARE RSQUARE
		| 
		IDENT
		
VarDeclList ::= VarDeclList VarDecl
			|
			/* epsilon */
			;


Type ::= (Type) IDENT:typeName;

MethodDecl ::= VOID IDENT LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE;


Statement ::= DesignatorStatement SEMICOLON;
			|
			READ LPAREN Designator RPAREN SEMICOLON;
			|
			PRINT LPAREN Expr NumConstOpt RPAREN SEMICOLON;
			|
			LBRACE StatementList RBRACE
			;


StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
				


NumConstOpt ::= COMMA NUMBER
			|
			/* epsilon */
			;


DesignatorStatement ::= Designator ASSIGNMENT Expr
					|
					Designator INC
					|
					Designator DEC
					;

Expr ::= OptMinus Term AddOpTermList;

OptMinus::= MINUS
		|
		/* epsilon */
		;
		
AddOpTermList ::= AddOpTermList AddOpTerm
				|
				/* epsilon */
				;
				
AddOpTerm ::= Addop Term;

Term ::= Factor MulOpFactorList;

MulOpFactorList ::= MulOpFactorList MulOpFactor
				|
				/* epsilon */
				;
				
MulOpFactor ::= MulOp Factor;

Factor ::= Designator
		|
		NUMBER
		|
		CHAR_CONST
		|
		BOOL_CONST
		|
		NEW Type LSQUARE Expr RSQUARE
		|
		LPAREN Expr RPAREN
		;
		
Designator ::= IDENT DesignatorOptList;

DesignatorOptList ::= DesignatorOptList DesignatorOpt
					|
					/* epsilon */
					;

DesignatorOpt ::= DOT IDENT
				|
				LSQUARE Expr RSQUARE
				;

Label ::= IDENT;

Relop ::= EQUAL
		|
		NOT_EQUAL
		|
		GREATER
		|
		GREATER_EQUAL
		|
		LESS
		|
		LESS_EQUAL
		;
		
AddOp ::= PLUS
		|
		MINUS
		;
		
MulOp ::= MUL
		|
		DIV
		|
		MOD
		;





			
Expr ::= (AddExpr) Expr:te Addop Term:t
	 |
	 (TermExpr) Term:t
	 ;

Designator ::= (Designator) IDENT:name;

Addop ::= (Addop) PLUS;
		
		

